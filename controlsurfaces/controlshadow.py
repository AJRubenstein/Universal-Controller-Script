
from .controlmapping import ControlMapping
from . import ControlSurface

class ControlShadow:
    """
    A class representing a MIDI event mapped to a control surface

    Subclasses of this object should be generated by device modules, so that it
    can then be processed by plugin modules.
    """
    
    def __init__(self, control: ControlSurface) -> None:
        """
        Create an event object

        This should be called when recognising an event

        ### Args:
        * `control` (`ControlSurface`): control associated with this event
        """
        self.__control = control
        self.__value = control.value

    def getControl(self):
        """
        Get a reference to the control surface associated with the event

        ### Returns:
        * `ControlSurface`: control surface
        """
        return self.__control
    
    def getMapping(self) -> ControlMapping:
        return self.__control.getMapping()
    
    def getCurrentValue(self) -> float:
        """
        Returns the value currently applied to this control.
        
        NOTE: This differs from the value which will be applied to the control,
        which is stored in the `value` property.

        ### Returns:
        * `float`: value of the event (0 - 1.0)
        """
        return self.__control.value

    @property
    def value(self) -> float:
        """
        Represents the value that will be applied to the control after
        the event has been processed, as a float between 0-1
        """
        return self.__value
    @value.setter
    def value(self, newVal: float) -> None:
        if not (0 <= newVal <= 1):
            raise ValueError("Value must be within range 0-1")
        self.__value = newVal
